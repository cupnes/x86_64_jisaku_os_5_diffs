diff -ru archive/012_2_dump_nproc_at_kern/main.c 021_apic_id/main.c
--- archive/012_2_dump_nproc_at_kern/main.c	2019-06-22 12:46:15.939226583 +0900
+++ 021_apic_id/main.c	2019-06-22 20:01:11.654469372 +0900
@@ -17,20 +17,52 @@
 struct __attribute__((packed)) platform_info {
 	struct framebuffer fb;
 	void *rsdp;
-	unsigned int nproc;
 };
 
 #define INIT_APP	"test"
 
+/* コンソールへアクセス可能なCPUを管理(同時アクセスを簡易的に防ぐ) */
+unsigned char con_access_perm = 0;
+
+unsigned char get_pnum(void);
+
 void start_kernel(void *_t __attribute__((unused)), struct platform_info *pi,
 		  void *_fs_start)
 {
+	unsigned char pnum = get_pnum();
+
+	/* APの場合、初期化処理をスキップ */
+	if (pnum) {
+		/* 自分の番まで待つ */
+		while (con_access_perm != pnum);
+
+		/* AP自身のプロセッサ番号を表示 */
+		puth(pnum, 1);
+
+		/* 次の番へ回す */
+		con_access_perm++;
+
+		/* haltして待つ */
+		while (1)
+			cpu_halt();
+	}
+
 	/* フレームバッファ周りの初期化 */
 	fb_init(&pi->fb);
 	set_fg(255, 255, 255);
 	set_bg(0, 70, 250);
 	clear_screen();
 
+	/* BSP自身のプロセッサ番号を表示 */
+	puth(pnum, 1);
+
+	/* 次の番へ回す */
+	con_access_perm++;
+
+	/* haltして待つ */
+	while (1)
+		cpu_halt();
+
 	/* ACPIの初期化 */
 	acpi_init(pi->rsdp);
 
@@ -38,14 +70,6 @@
 	gdt_init();
 	intr_init();
 
-	/* ブートローダーから渡されたプロセッサ数を表示 */
-	puts("NPROC ");
-	puth(pi->nproc, 1);
-
-	/* haltして待つ */
-	while (1)
-		cpu_halt();
-
 	/* 周辺ICの初期化 */
 	pic_init();
 	hpet_init();
@@ -74,3 +98,14 @@
 	while (1)
 		cpu_halt();
 }
+
+unsigned char get_pnum(void)
+{
+	unsigned int pnum;
+
+	asm volatile ("movl 0xfee00020, %[pnum]\n" /* Local APIC ID Register */
+		      "shrl $0x18, %[pnum]\n"
+		      : [pnum]"=r"(pnum));
+
+	return pnum;
+}
diff -ru archive/012_2_dump_nproc_at_kern/x86.c 021_apic_id/x86.c
--- archive/012_2_dump_nproc_at_kern/x86.c	2019-06-22 12:46:15.939226583 +0900
+++ 021_apic_id/x86.c	2019-06-22 20:01:11.654469372 +0900
@@ -54,18 +54,19 @@
 	asm volatile ("lgdt gdtr");
 
 	/* DS・SSの設定 */
-	asm volatile ("movw $2*8, %ax\n"
-		      "movw %ax, %ds\n"
-		      "movw %ax, %ss\n");
+	asm volatile ("movw $2*8, %%ax\n"
+		      "movw %%ax, %%ds\n"
+		      "movw %%ax, %%ss\n"
+		      ::: "%ax");
 
 	/* CSの設定 */
 	unsigned short selector = SS_KERNEL_CODE;
 	unsigned long long dummy;
-	asm volatile ("pushq %[selector];"
-		      "leaq ret_label(%%rip), %[dummy];"
-		      "pushq %[dummy];"
-		      "lretq;"
-		      "ret_label:"
+	asm volatile ("pushq %[selector]\n"
+		      "leaq ret_label(%%rip), %[dummy]\n"
+		      "pushq %[dummy]\n"
+		      "lretq\n"
+		      "ret_label:\n"
 		      : [dummy]"=r"(dummy)
 		      : [selector]"m"(selector));
 }
