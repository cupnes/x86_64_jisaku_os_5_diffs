diff -ru 022_wait_con_init/fbcon.c 023_spin_lock/fbcon.c
--- 022_wait_con_init/fbcon.c	2019-06-22 20:01:11.654469372 +0900
+++ 023_spin_lock/fbcon.c	2019-06-22 20:01:11.674469296 +0900
@@ -1,3 +1,4 @@
+#include <x86.h>
 #include <fbcon.h>
 #include <fb.h>
 #include <font.h>
@@ -7,9 +8,12 @@
 #define MAX_STR_BUF	21
 
 unsigned int cursor_x = 0, cursor_y = 0;
+unsigned int putc_lock = 0;
 
 void putc(char c)
 {
+	spin_lock(&putc_lock);
+
 	unsigned int x, y;
 
 	switch(c) {
@@ -43,6 +47,8 @@
 			}
 		}
 	}
+
+	spin_unlock(&putc_lock);
 }
 
 void puts(char *s)
diff -ru 022_wait_con_init/include/x86.h 023_spin_lock/include/x86.h
--- 022_wait_con_init/include/x86.h	2019-06-22 20:01:11.658469357 +0900
+++ 023_spin_lock/include/x86.h	2019-06-23 21:00:40.074171681 +0900
@@ -6,6 +6,8 @@
 
 #define MAX_INTR_NO	256
 
+#define CPU_PAUSE()	asm volatile ("pause")
+
 struct __attribute__((packed)) interrupt_descriptor {
 	unsigned short offset_00_15;
 	unsigned short segment_selector;
@@ -27,5 +29,7 @@
 unsigned int io_read32(unsigned short addr);
 void io_write32(unsigned short addr, unsigned int value);
 void gdt_init(void);
+void spin_lock(unsigned int *lockvar);
+void spin_unlock(volatile unsigned int *lockvar);
 
 #endif
diff -ru 022_wait_con_init/x86.c 023_spin_lock/x86.c
--- 022_wait_con_init/x86.c	2019-06-22 20:01:11.666469327 +0900
+++ 023_spin_lock/x86.c	2019-06-23 21:00:40.086171583 +0900
@@ -70,3 +70,48 @@
 		      : [dummy]"=r"(dummy)
 		      : [selector]"m"(selector));
 }
+
+/*
+Spin_Lock:
+	CMP lockvar, 0		;Check if lock is free
+	JE Get_Lock
+	PAUSE			;Short delay
+	JMP Spin_Lock
+Get_Lock:
+	MOV EAX, 1
+	XCHG EAX, lockvar	;Try to get lock
+	CMP EAX, 0		;Test if successful
+	JNE Spin_Lock
+Critical_Section:
+	<critical section code>
+	MOV lockvar, 0
+	...
+Continue:
+
+# ref:
+# 8.10.6.1 Use the PAUSE Instruction in Spin-Wait Loops
+# - Intel(R) 64 and IA-32 Architectures Software Developer's Manual
+#   Volume 3 System Programming Guide
+*/
+
+void spin_lock(unsigned int *lockvar)
+{
+	unsigned char got_lock = 0;
+	do {
+		while (*lockvar)
+			CPU_PAUSE();
+
+		unsigned int lock = 1;
+		asm volatile ("xchg %[lock], %[lockvar]"
+			      : [lock]"+r"(lock), [lockvar]"+m"(*lockvar)
+			      :: "memory", "cc");
+
+		if (!lock)
+			got_lock = 1;
+	} while (!got_lock);
+}
+
+void spin_unlock(volatile unsigned int *lockvar __attribute__((unused)))
+{
+	*lockvar = 0;
+}
